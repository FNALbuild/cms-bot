#!/bin/sh -ex
NUM_PROC=$(nproc)
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac
if [ "X$COMPARISON_ARCH" = "X" ] ; then COMPARISON_ARCH=$ARCHITECTURE; fi
source $CMS_BOT_DIR/jenkins-artifacts
cd $WORKSPACE
rm -rf $WORKSPACE/results $WORKSPACE/upload
JR_COMP_DIR=$WORKSPACE/results/JR-comparison
mkdir -p $WORKSPACE/upload ${JR_COMP_DIR} $WORKSPACE/data
rm -f $WORKSPACE/ALL_DONE

if [ "X$COMPARISON_RELEASE" = "X" ] ; then COMPARISON_RELEASE=$RELEASE_FORMAT; fi

BASELINE_DIR=ib-baseline-tests/$COMPARISON_RELEASE/$COMPARISON_ARCH/$REAL_ARCH/matrix-results
PR_BASELINE_JOBDIR=pull-request-integration/PR-$PULL_REQUEST_NUMBER/$PULL_REQUEST_JOB_ID
PR_BASELINE_DIR=${PR_BASELINE_JOBDIR}/runTheMatrix-results

WFS_WITH_ERRORS=''

MAPPING_FILE=wf_mapping.txt
get_jenkins_artifacts ${BASELINE_DIR}/$MAPPING_FILE $WORKSPACE/$MAPPING_FILE
get_jenkins_artifacts ${PR_BASELINE_JOBDIR}/testsResults.txt $WORKSPACE/results/testsResults.txt
BASE_IB=$(grep '^BASE_IB;' $WORKSPACE/results/testsResults.txt | sed 's|.*;||')
if [ "X${BASE_IB}" = "X" ] ; then BASE_IB=$RELEASE_FORMAT ; fi

COMP_UPLOAD_DIR="baseLineComparisons/${BASE_IB}+${PULL_REQUEST_NUMBER}/${BUILD_NUMBER}"
ERRORS_FILE=wf_errors.txt
get_jenkins_artifacts ${BASELINE_DIR}/$ERRORS_FILE $WORKSPACE/$ERRORS_FILE

# This file is generated by this script
DAS_NON_CONSISTENT_WFS_FILE=wf_non_consistent_das.txt

for wf in ${WORKFLOWS_LIST//,/ }
do
  WF_PATH=`grep "^${wf}_" $WORKSPACE/$MAPPING_FILE` || true

  if [ "X$WF_PATH" = X ]; then
    ERR_DETAILS=`grep "$wf;" $WORKSPACE/$ERRORS_FILE` || true
    if [ "X$ERR_DETAILS" = X ]; then
      WFS_WITH_ERRORS=$ERR_DETAILS,$wf';1'
    else
      WFS_WITH_ERRORS=$ERR_DETAILS,$WFS_WITH_ERRORS
    fi
  else
    echo "Going to compare: $wf"
    echo $WF_PATH
    echo ""
    WORKFLOWS_TO_COMPARE=$WORKFLOWS_TO_COMPARE,$WF_PATH
  fi
done

#remove first ,
WORKFLOWS_TO_COMPARE=`echo $WORKFLOWS_TO_COMPARE | sed 's/^.//'`

ls /cvmfs/cms-ib.cern.ch || true
export SCRAM_ARCH=$ARCHITECTURE
which scram 2>/dev/null || source /cvmfs/cms.cern.ch/cmsset_default.sh
echo "Set up release area at `date`"
rm -rf $BASE_IB; scram project $BASE_IB
set +x
cd $BASE_IB
eval `scram run -sh`
set -x
if $DQM_COMPARISON_TEST ; then
  if [ ! -e $CMSSW_RELEASE_BASE/src/DQMServices/FileIO/scripts/compareDQMOutput.py ] ; then
    DQM_COMPARISON_TEST=false
  fi
fi
if [ "$COMPARISON_PRS" != "" ] ; then
  for pr in $(echo $COMPARISON_PRS | tr ' ' '\n' | grep "/cmssw#" | sed 's|.*#||') ; do
    git cms-merge-topic --debug --ssh -u cms-sw:${pr}
  done
fi
if [ -e $CMSSW_RELEASE_BASE/src/Utilities/RelMon ] ; then
  if [ ! -e src/Utilities/RelMon ] ; then
    mkdir -p src/Utilities/RelMon
    cp -r $CMSSW_RELEASE_BASE/src/Utilities/RelMon/* src/Utilities/RelMon/
  fi
  sed -i -e 's|\.\./RelMonSummary.html|RelMonSummary.html|' src/Utilities/RelMon/python/directories2html.py
fi
scram build -j ${NUM_PROC}
cd $WORKSPACE/results
echo $WORKFLOWS_TO_COMPARE

echo "Downloading Ref: `date`"
get_jenkins_artifacts ${BASELINE_DIR}/    $WORKSPACE/data/$RELEASE_FORMAT/ || true
echo "Downloading PR: `date`"
get_jenkins_artifacts ${PR_BASELINE_DIR}/ $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER}/ || true
echo "Done Downloading `date`"
for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do

  WF_DIR=`echo $WF | cut -d "/" -f1`
  WF_NUMBER=`echo $WF | cut -d'_' -f1`
  WF_FILE=$(basename $WF)

  mkdir -p $WORKSPACE/results/files/$WF_DIR
  ln -s $WORKSPACE/data/$RELEASE_FORMAT/${WF} $WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-$WF_FILE

  if [ -f $WORKSPACE/data/$RELEASE_FORMAT/$WF_DIR/step1_dasquery.log ] ; then
    grep '/store/' $WORKSPACE/data/$RELEASE_FORMAT/$WF_DIR/step1_dasquery.log > $WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-step1_dasquery.log || true
  fi
  if [ -f $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER}/$WF ] ; then
    ln -s $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER}/$WF $WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-$WF_FILE
  fi
  if [ -f $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER}/$WF_DIR/step1_dasquery.log ] ; then
    grep '/store/' $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER}/$WF_DIR/step1_dasquery.log > $WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-step1_dasquery.log || true
  fi

  # check that the step1_dasquery.log files are correct.
  NUM_FILES=$(( `ls $WORKSPACE/results/files/$WF_DIR/*-step1_dasquery.log | wc -l` ))
  # if there is only one of them something is wrong, but if there is none is ok
  if [ "$NUM_FILES" -eq "1" ]; then
    WFS_WITH_DAS_INCONSISTENCY=$WF_NUMBER,$WFS_WITH_DAS_INCONSISTENCY
  elif [ "$NUM_FILES" -eq "2" ]; then
    PR_DAS_QUERY_LOG="$WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-step1_dasquery.log"
    BASELINE_DAS_QUERY_LOG="$WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-step1_dasquery.log"
    THEY_DIFFER=`diff -q "$PR_DAS_QUERY_LOG" "$BASELINE_DAS_QUERY_LOG" || true`
    if [ "X$THEY_DIFFER" != X ]; then
      WFS_WITH_DAS_INCONSISTENCY=$WF_NUMBER,$WFS_WITH_DAS_INCONSISTENCY
    fi
  fi 
done

echo $WFS_WITH_DAS_INCONSISTENCY >> $WORKSPACE/$DAS_NON_CONSISTENT_WFS_FILE

echo "Finished downloading files at `date`:"
sed -i '/COMPARISON;/d' $WORKSPACE/results/testsResults.txt
echo "COMPARISON;RUNNING" >> $WORKSPACE/results/testsResults.txt
if [ "$DRY_RUN" != "true" ] ; then
  send_jenkins_artifacts $WORKSPACE/results/testsResults.txt ${PR_BASELINE_JOBDIR}/testsResults.txt
fi

if $DQM_COMPARISON_TEST ; then
  (compareDQMOutput.py -b $WORKSPACE/data/$RELEASE_FORMAT/ -p $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER} -o $CMS_BOT_DIR/dqm-comparison/dqmComparisonOutput/ -l "$PULL_REQUESTS" -t $PULL_REQUEST_JOB_ID -r $RELEASE_FORMAT -s $WORKSPACE/upload/ -j $NUM_PROC > $WORKSPACE/upload/dqmBinByBinLog.log 2>&1) || true
  echo "DQM_BIN_BY_BIN_COMPARISON;OK,DQM bin by bin comparison,See results,/SDT/jenkins-artifacts/${COMP_UPLOAD_DIR}/dqm-histo-comparison-summary.html" >> $WORKSPACE/results/testsResults.txt
fi

# --------------------------------------------------------------------------
# JR-Comparison
# --------------------------------------------------------------------------

#This is used manily for testing. In jenkins the 3 forms of comparisons are always run. But if you are testing you can control
#which comparison is run.
if [ "X$RUN_JR_COMP" = Xtrue ]; then

  cd $JR_COMP_DIR
  cp $CMS_BOT_DIR/comparisons/validateJR.sh  $JR_COMP_DIR
  chmod +x $JR_COMP_DIR/validateJR.sh
  cp $CMS_BOT_DIR/comparisons/validate.C     $JR_COMP_DIR
  cp $CMS_BOT_DIR/comparisons/matrix_RE.txt $JR_COMP_DIR
  export VALIDATE_C_SCRIPT=${JR_COMP_DIR}/validate.C

  echo "Start JR comparison at `date`"
  echo  "$JR_COMP_DIR/validateJR.sh $WORKSPACE/data/PR-$PULL_REQUEST_NUMBER $WORKSPACE/data/$RELEASE_FORMAT OldVSNew matrix_RE.txt >> $JR_COMP_DIR/validateJR.log 2>&1" > $JR_COMP_DIR/command
  ($JR_COMP_DIR/validateJR.sh $WORKSPACE/data/PR-$PULL_REQUEST_NUMBER $WORKSPACE/data/$RELEASE_FORMAT OldVSNew matrix_RE.txt >> $JR_COMP_DIR/validateJR.log 2>&1) || true

  echo "Finished with JR comparison at `date`:"
fi

set +x
# --------------------------------------------------------------------------
# Default Comparison
# --------------------------------------------------------------------------
if [ "X$RUN_DEFAULT_COMP" = Xtrue ]; then
  echo "Started with default comparison at `date`"
  
  RELMON_COMP_DIR=$WORKSPACE/results/default-comparison
  mkdir $RELMON_COMP_DIR

  if [ "X$RUN_JR_COMP" = Xtrue ]; then
    RELMON_COMP_PARAMS_FILE=$RELMON_COMP_DIR/RelMonComparisonParams.txt
    $CMS_BOT_DIR/comparisons/analyzeFWComparison.py $JR_COMP_DIR $RELMON_COMP_PARAMS_FILE -R >> $RELMON_COMP_DIR/RelMonAssignedParameters.log 2>&1
  fi

  touch $WORKSPACE/results/default-comparison/done-0
  for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do 

    WF_FILE=$(basename $WF)
    WF_DIR=`echo $WF | cut -d "/" -f1`
    WF_NUMBER=`echo $WF | cut -d'_' -f1`

    #create the output dir
    OUTPUT_DIR=$WORKSPACE/results/default-comparison/$WF_DIR
    mkdir -p $OUTPUT_DIR

    # If there is a file assigning custom thresholds from the results of the FWlite (JR) comparison, use it
    if [ "X$RUN_JR_COMP" = Xtrue ]; then
      eval $( cat $RELMON_COMP_PARAMS_FILE | grep "FOR_WF=$WF_NUMBER;" )
      echo "TH=$TH"
      TH_PARAM="-t $TH "
    fi

    #requires checking out Utilities/RelMon from the release. It has already been done at the begining of this script. 

    # create a mini script for running this comparisons in parallel
    echo '#!/bin/sh -ex' > $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "ERR=0" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "compare_using_files.py -B DQM/TimerService@3 $WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-$WF_FILE $WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-$WF_FILE -o $OUTPUT_DIR --metas \" $RELEASE_FORMAT @@@ $RELEASE_FORMAT + $PULL_REQUEST_NUMBER \" --use_black_file -C -R -p --no_successes -s b2b $TH_PARAM --standalone >> ${OUTPUT_DIR}RelMonComp-$WF_NUMBER.log 2>&1 || ERR=1" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "cp $OUTPUT_DIR/RelMonSummary.html $OUTPUT_DIR/index.html || true" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo "touch $WORKSPACE/results/default-comparison/done-$WF_NUMBER" >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    echo 'exit $ERR' >> $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    chmod 755 $WORKSPACE/results/default-comparison/command-$WF_NUMBER
    while [ $(jobs -p | wc -l) -ge ${NUM_PROC} ] ; do sleep 5 ; done
    echo "Running $WORKSPACE/results/default-comparison/command-$WF_NUMBER"
    ($WORKSPACE/results/default-comparison/command-$WF_NUMBER > ${OUTPUT_DIR}/cmd.log 2>&1 || touch $WORKSPACE/results/default-comparison/error-$WF_NUMBER) &
  done
fi

# ----------------------------------------------------------------------------
# Alternative Comparison
# ----------------------------------------------------------------------------

if [ "X$RUN_ALT_COMP" = Xtrue ]; then
  echo "Started with alternative comparison at `date`"
  
  ALT_COMP_DIR=$WORKSPACE/results/alternative-comparison
  mkdir -p $ALT_COMP_DIR
  DQM_COMP_PARAMS_FILE=$ALT_COMP_DIR/comparisonParams.txt

  if [ "X$RUN_JR_COMP" = Xtrue ]; then
    $CMS_BOT_DIR/comparisons/analyzeFWComparison.py $JR_COMP_DIR $DQM_COMP_PARAMS_FILE >> $ALT_COMP_DIR/assignedParameters.log 2>&1
  fi
  for WF in ${WORKFLOWS_TO_COMPARE//,/ }; do 

    WF_FILE=$(basename $WF)
    WF_DIR=`echo $WF | cut -d "/" -f1`
    WF_NUMBER=`echo $WF | cut -d'_' -f1`
    BASE_FILE=$WORKSPACE/results/files/$WF_DIR/$RELEASE_FORMAT-$WF_FILE
    COMP_FILE=$WORKSPACE/results/files/$WF_DIR/$PULL_REQUEST_NUMBER-$WF_FILE
  
    mkdir -p $ALT_COMP_DIR/$WF_NUMBER
    cp $CMS_BOT_DIR/comparisons/compareValHists.C $ALT_COMP_DIR/$WF_NUMBER
    cp $CMS_BOT_DIR/comparisons/makeDiff.sh $ALT_COMP_DIR/$WF_NUMBER

    eval $( cat $DQM_COMP_PARAMS_FILE | grep "FOR_WF=$WF_NUMBER;" )
    echo "MOD=$MOD"

    # create a mini script for running this comparisons in parallel
    echo '#!/bin/sh -ex' > $ALT_COMP_DIR/command-$WF_NUMBER
    echo "ERR=0" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "cd $ALT_COMP_DIR/$WF_NUMBER" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "$ALT_COMP_DIR/$WF_NUMBER/makeDiff.sh $BASE_FILE $COMP_FILE $WF_NUMBER-result.ps 0 $MOD || ERR=1" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "mv diff.ps $ALT_COMP_DIR/$WF_NUMBER-result.ps || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "mv diff.pdf $ALT_COMP_DIR/$WF_NUMBER-result.pdf || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "gzip -f $ALT_COMP_DIR/$WF_NUMBER-result.ps || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo "gzip -f $ALT_COMP_DIR/$WF_NUMBER-result.pdf || true" >> $ALT_COMP_DIR/command-$WF_NUMBER
    echo 'exit $ERR' >> $ALT_COMP_DIR/command-$WF_NUMBER

    chmod 755 $ALT_COMP_DIR/command-$WF_NUMBER
    while [ $(jobs -p | wc -l) -ge ${NUM_PROC} ] ; do sleep 5 ; done
    echo "Running $ALT_COMP_DIR/command-$WF_NUMBER"
    ($ALT_COMP_DIR/command-$WF_NUMBER > $ALT_COMP_DIR/runDQMComp-$WF_NUMBER.log 2>&1 || touch $ALT_COMP_DIR/error-$WF_NUMBER) &
  done
fi

if [ -e $WORKSPACE/results/default-comparison/done-0 ] ; then
  while [ $(ls -d $WORKSPACE/results/default-comparison/done-* | wc -l) -le $(ls -d $WORKSPACE/results/default-comparison/command-* | wc -l) ] ; do
    sleep 60
    echo "Jobs Running: $(jobs -p | wc -l)"
  done
  rm -f $WORKSPACE/results/default-comparison/done-*
  rm -f $WORKSPACE/results/default-comparison/cmdlog-*
  echo "Finished with default comparison at `date`"
fi
set -x

#----------------------------------
# Comparison summary
#----------------------------------
if [ "X$RUN_JR_COMP" = Xtrue ]; then
  if [ "X$RUN_DEFAULT_COMP" = Xtrue ]; then
    QALOG=$JR_COMP_DIR/logRootQA.log
    JRHTML=$WORKSPACE/upload/validateJR.html
    echo 'Doing histogram, log and root comparison:'
    (python $CMS_BOT_DIR/logRootQA.py $WORKSPACE/data/${RELEASE_FORMAT} $WORKSPACE/data/PR-${PULL_REQUEST_NUMBER} ${JR_COMP_DIR} $WORKSPACE/results/default-comparison  >> $QALOG 2>&1) || true
    (grep SUMMARY $QALOG | cut -d' ' -f2-100 >> $JR_COMP_DIR/qaResultsSummary.log 2>&1) || true
    echo "<html><body><h3>Default comparison: Workflows with failed comparisons</h3>" > $JRHTML
    echo "<table><tr><td>WF #</td><td>Failed</td></tr>" >> $JRHTML
    grep 'Histogram comparison details' $QALOG  | grep '\.log *\[[1-9][0-9]* *, *[1-9][0-9]*'  | sed 's|.*/default-comparison/\(\([^_]*\)_.*\)RelMonComp.*.log \[[1-9][0-9]* *, *\([1-9][0-9]*\) *,.*|<tr><td><a href="\1">\2</a></td><td align="right">\3</td></tr>|' >> $JRHTML
    if [ $(cat $JRHTML | wc -l) -eq 2 ] ; then
      echo "<tr><td>ALL OK</td><td>No errors</td></tr></table>" >> $JRHTML
    else
      echo "</table>" >> $JRHTML
    fi
    echo "<h3>Default comparison: Workflows with reco comparison differences</h3>" >> $JRHTML
    echo "<table><tr><td>WF #</td><td>Differences</td></tr>" >> $JRHTML
    grep 'JR results differ' $QALOG | awk '{ split($0,a," "); print "<tr><td><a href=\"validateJR/"a[5]"\">"a[5]"</a></td><td align=\"right\">"a[4]"</td></tr>" }' >> $JRHTML
    if [ $(tail -1 $JRHTML | grep "Differences" | wc -l) -eq 1 ] ; then
      echo "<tr><td>ALL OK</td><td>No differences</td></tr></table>" >> $JRHTML
    else
      echo "</table>" >> $JRHTML
    fi
    echo "</body></html>" >> $JRHTML
    echo "FAILED_COMPARISON;OK,Comparison failed,See failed,/SDT/jenkins-artifacts/${COMP_UPLOAD_DIR}/validateJR.html" >> $WORKSPACE/results/testsResults.txt
  fi
fi

jobs
wait || true

cd $WORKSPACE
mkdir -p upload/alternative-comparisons

#default-comparison
if [ "X${FILTER_FAILED_COMPARISON}" = "Xtrue" ] ; then
  for f in results/default-comparison/* ; do
    if [ -f $f ] ; then
      mv $f upload/
    elif [ ! -f $f/index.html ] ; then
      mv $f upload/
    elif [ -d $f ] ; then
      set +x
      while [ $(jobs -p | wc -l) -ge ${NUM_PROC} ] ; do sleep 1 ; done
      set -x
      $CMS_BOT_DIR/comparisons/filter-failed-comparison.py $f $WORKSPACE/upload &
    fi
  done
  wait || true
else
  for f in results/default-comparison/* ; do
    [ -e $f ] && mv $f upload/
  done
fi

#alternative-comparison
alt_dir=results/alternative-comparison
for f in $(find ${alt_dir} -maxdepth 1 -name 'command*' -o -name '*.ps' -o -name '*.gz' -o -name '*.log' -o -name '*.txt') ; do
  mv $f upload/alternative-comparisons/
done

#JR-comparison
for x in $(find results/JR-comparison -maxdepth 2 -name 'command*' -o -name '*.log' -o -name '*.png' -type f) ; do
  f=$(echo $x | sed 's|results/JR-comparison/||')
  d=$(dirname upload/validateJR/$f)
  [ -d $d ] || mkdir -p $d
  mv results/JR-comparison/$f $d/
done

#files
if [ -e results/files ] ; then
  mkdir -p upload/files
  for file in $(find results/files -mindepth 2 -maxdepth 2 -name '*' | sed 's|^results/files/||') ; do
    fname=$(basename $file)
    wfdir=$(dirname $file)
    mkdir -p upload/files/${wfdir}
    case $file in 
      */${RELEASE_FORMAT}-*) SRC_FILE=../../../../../${BASELINE_DIR}/${wfdir}/$(echo $fname | sed "s|${RELEASE_FORMAT}-||") ;;
      *)                     SRC_FILE=../../../../../${PR_BASELINE_DIR}/${wfdir}/$(echo $fname | sed "s|$PULL_REQUEST_NUMBER-||") ;;
    esac
    ln -sf $SRC_FILE upload/files/$file
  done
fi
[ -e comparisonDetails.txt ] && mv comparisonDetails.txt upload/
if [ "$DRY_RUN" != "true" ] ; then
  send_jenkins_artifacts $WORKSPACE/upload/ ${COMP_UPLOAD_DIR}/
  if [ -e $WORKSPACE/results/testsResults.txt ] ; then
    sed -i "s/^COMPARISON;.*/COMPARISON;$BUILD_NUMBER/g" $WORKSPACE/results/testsResults.txt
    send_jenkins_artifacts $WORKSPACE/results/testsResults.txt ${PR_BASELINE_JOBDIR}/testsResults.txt
  fi
fi
echo "All done at `date`"
touch $WORKSPACE/ALL_DONE

