#!/bin/sh -ex

# The release should have been already created in Github
# CMSSW_X_Y_Z: the release to build
# ARCHITECTURE: architecture for the build
# ISSUE_NUMBER: the number of the issue that triggered the build
# DRY_RUN_PARAM: parameter that to use dry-run
# ONLY_BUILD_TOOLCONF: if True, tells me to only build cmssw-tool-conf 
CMSSW_X_Y_Z=$1
ARCHITECTURE=$2
CMSSW_QUEUE=$3
ONLY_BUILD_TOOLCONF=$4
ISSUE_NUMBER=$5
DRY_RUN_PARAM=$6
CMSDIST_HASH=$7
echo DATE=`date`
HERE=$WORKSPACE/build
BUILD_DIR=$HERE/$CMSSW_X_Y_Z-build
mkdir -p $BUILD_DIR
BUILD_NPROC=$(nproc)
QUEUE=$CMSSW_QUEUE

kinit -R || true
echo $$ > $WORKSPACE/BUILD_PID

if [ "X$ONLY_BUILD_TOOLCONF" = Xtrue ]; then
  POST_ACTION='TOOL_CONF_BUILDING'
else
  POST_ACTION='BUILDING'
fi
if [ -d /cvmfs/cms.cern.ch/cmssw.git.daily ] ; then
  export CMSSW_GIT_REFERENCE=/cvmfs/cms.cern.ch/cmssw.git.daily
fi
git clone git@github.com:cms-sw/cmsdist.git $BUILD_DIR/CMSDIST
pushd $BUILD_DIR/CMSDIST
  eval $(cat $WORKSPACE/config.map | grep -v "DISABLED="| grep "SCRAM_ARCH=$ARCHITECTURE;" | grep "RELEASE_QUEUE=$QUEUE;")

  # a patch release uses the same cmsdist tag as its base release
  case $CMSSW_X_Y_Z in
    *patch*)
    BASE_RELEASE=`echo $CMSSW_X_Y_Z | sed 's/_patch[0-9]*//g'`
    CMSDIST_TAG=REL/$BASE_RELEASE/$ARCHITECTURE
    PATCH='-patch'
    ;;
    * )
    [ ! -z "$CMSDIST_HASH" ] && CMSDIST_TAG=$CMSDIST_HASH
    ;;
  esac

  #Create a temp branch so that we can commit the local changes and
  #push the REL tag once release is build successfully
  git checkout $CMSDIST_TAG
  git checkout -b TMP-$CMSSW_X_Y_Z-$ARCHITECTURE
popd

git clone -b $PKGTOOLS_TAG git@github.com:cms-sw/pkgtools.git $BUILD_DIR/PKGTOOLS
echo DATE=`date`
BRANCH_DETAILS="CMSDIST Branch: [$CMSDIST_TAG](https://github.com/cms-sw/cmsdist/commits/$CMSDIST_TAG), PKGTOOLS Branch: [$PKGTOOLS_TAG](https://github.com/cms-sw/pkgtools/commits/$PKGTOOLS_TAG)"
WORKER="${NODE_NAME}"
if [ "${WORKER}" = "" ] ; then WORKER=`hostname -s` ; fi
./report-build-release-status ${BUILD_NUMBER} $WORKER $ISSUE_NUMBER $ARCHITECTURE $CMSSW_X_Y_Z $POST_ACTION $DRY_RUN_PARAM -d "$BRANCH_DETAILS"
echo DATE=`date`
pushd $BUILD_DIR
  # prepare cmssw.spec
  if [ "X$ENABLE_DEBUG" = X ] && [ "X$PATCH" = X ]; then
    perl -p -i -e 's/^[\s]*%define[\s]+subpackageDebug[\s]+./#subpackage debug disabled/' CMSDIST/cmssw.spec CMSDIST/cmssw-patch.spec CMSDIST/coral.spec
    (cd CMSDIST ; git commit -m 'Coherent debug package setup.' cmssw.spec cmssw-patch.spec coral.spec)
  fi
  sh -e PKGTOOLS/scripts/prepare-cmsdist $CMSSW_X_Y_Z $ARCHITECTURE > $WORKSPACE/prepare-cmsdist.log 2>&1
  echo DATE=`date`
  CMSBUILD_CMD="PKGTOOLS/cmsBuild --repo cms --architecture=$ARCHITECTURE -j $BUILD_NPROC"
  case `uname -s` in
    Darwin ) MD5_CMD=md5;;
    * )      MD5_CMD=md5sum;;
  esac
  CMSBUILD_CMD="${CMSBUILD_CMD} --tag `echo $QUEUE | $MD5_CMD |  tr '0123456789' 'ghijklmnop' | cut -b1-6`"
  if [ $(echo $PKGTOOLS_TAG | cut -d- -f2) -gt 31 ] ; then
    CMSBUILD_CMD="${CMSBUILD_CMD} --delete-build-directory"
  fi
  PYTHONPATH= $CMSBUILD_CMD --debug --specs-only build cmssw$PATCH
  echo DATE=`date`
  TOOL_CONF_PACKAGES=`grep '^%define \(build\|\)directpkgreqs' SPECS/cms/cmssw$PATCH/*/spec | grep -v '%{nil}' | sed 's|.*directpkgreqs[ \t]*||' | tr ' ' '\n' | cut -f2 -d/ | sort | uniq | tr '\n' ' '`
  PYTHONPATH= $CMSBUILD_CMD --builders 4 build $TOOL_CONF_PACKAGES
  echo DATE=`date`
  rm -rf tmp/pip*
  if [ `ls RPMS/${ARCHITECTURE} | wc -l` -gt 0 ] ; then
    PYTHONPATH= $CMSBUILD_CMD --builders 4 --sync-back upload $TOOL_CONF_PACKAGES
    echo DATE=`date`
    PYTHONPATH= $CMSBUILD_CMD deprecate-local $TOOL_CONF_PACKAGES
    echo DATE=`date`
  fi

  if [ "X$ONLY_BUILD_TOOLCONF" = Xtrue ]; then
    echo 'I was asked to build only cmssw-tool-conf, exiting without building cmssw'
    pushd $HERE/$CMSSW_X_Y_Z-build/CMSDIST
      git tag  REL/$CMSSW_X_Y_Z-tool-conf/$ARCHITECTURE
      git push origin REL/$CMSSW_X_Y_Z-tool-conf/$ARCHITECTURE
    popd
    rm -rf tmp
    # If it reaches here it is because there were no errors
    echo 'ALL_OK'
    exit 0
  fi
  PYTHONPATH= $CMSBUILD_CMD -j $BUILD_NPROC build local-cern-siteconf cmssw$PATCH
  echo DATE=`date`
popd
echo DATE=`date`

pushd $HERE/$CMSSW_X_Y_Z-build/CMSDIST
  #Force delete any existing tags
  git tag -d REL/$CMSSW_X_Y_Z/$ARCHITECTURE || true
  git push origin :refs/tags/REL/$CMSSW_X_Y_Z/$ARCHITECTURE || true
  git tag  REL/$CMSSW_X_Y_Z/$ARCHITECTURE
  git push origin REL/$CMSSW_X_Y_Z/$ARCHITECTURE
popd


# If it reaches here it is because there were no errors
echo 'ALL_OK'

