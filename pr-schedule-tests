#!/bin/bash -ex
CMS_BOT_DIR=$(dirname $0)
case $CMS_BOT_DIR in /*) ;; *) CMS_BOT_DIR=$(pwd)/${CMS_BOT_DIR} ;; esac

cd $WORKSPACE

# The pull request number is $1
PULL_REQUEST=$1
CMSDIST_PR=$2
if [ "X$PUB_USER" = "X" ] ; then PUB_USER="cms-sw"; fi
PUB_REPO="${PUB_USER}/cmssw"

source $CMS_BOT_DIR/pr_testing/_helper_functions.sh
source $CMS_BOT_DIR/common/github_reports.sh
if [ "X$PULL_REQUESTS" = "X" ] ; then
    if [ ! -z $PULL_REQUEST ] ; then
        PULL_REQUESTS="cms-sw/cmssw#$PULL_REQUEST"
    fi
    if [ ! -z $CMSDIST_PR ] ; then
        PULL_REQUESTS="$PULL_REQUESTS cms-sw/cmsdist#$CMSDIST_PR"
    fi
fi
PULL_REQUESTS=$(echo $PULL_REQUESTS | sed 's/^ *//;s/ *$//')  # to make sure there are no surouding spaces
GITHUB_PR_TO_SEARCH=$(echo ${PULL_REQUESTS} | tr ' ' '\n' | grep '/cmsdist#' | head -n 1) # get 1st one
CMSDIST_TAG=  # To make sure no one set to different value by accident.
if [ ! -z ${GITHUB_PR_TO_SEARCH} ] ; then
    CMSDIST_TAG=$(get_base_branch "$GITHUB_PR_TO_SEARCH" )
fi
GITHUB_PR_TO_SEARCH=$(echo ${PULL_REQUESTS} | tr ' ' '\n' | grep '/cmssw#' | head -n 1)
if [ ! -z ${GITHUB_PR_TO_SEARCH} ] ; then
    CMSSW_BR=$(get_base_branch ${GITHUB_PR_TO_SEARCH})
fi
if [ "$RELEASE_FORMAT" != "" ] ; then
    RELEASE_QUEUE="$(echo $RELEASE_FORMAT | sed 's|_X.*|_X|')"
fi
CONFIG_LINE=$($CMS_BOT_DIR/common/get_config_map_line.sh  "${RELEASE_QUEUE-$CMSSW_BR}" "$CMSDIST_TAG" "${ARCHITECTURE_FILTER}") || true
if [ $(echo $CONFIG_LINE | tr ';' '\n' | grep SCRAM_ARCH= | wc -l) -eq 1 ] ; then
    eval $CONFIG_LINE
    OUTPUT_FILE=properties-pr-test-${SCRAM_ARCH}.txt
    echo PULL_REQUEST=${PULL_REQUEST} > $OUTPUT_FILE
    echo PULL_REQUESTS=${PULL_REQUESTS} >> $OUTPUT_FILE
    echo ARCHITECTURE=${SCRAM_ARCH} >> $OUTPUT_FILE
    if [ "X$RELEASE_FORMAT" = X ] ; then
      if [ "X$NO_IB" = "X1" ] ; then
        RELEASE_FORMAT=$(grep label=$(echo ${RELEASE_QUEUE} | sed 's|_X||') $CMS_BOT_DIR/releases.map | grep "architecture=${SCRAM_ARCH}" | tail -1 | sed 's|.*label=||;s|;.*||')
       else
        RELEASE_FORMAT="${RELEASE_QUEUE}"
      fi
    fi
    echo "DRY_RUN=${DRY_RUN}" >> $OUTPUT_FILE
    echo "ENABLE_BOT_TESTS=${ENABLE_BOT_TESTS}" >> $OUTPUT_FILE
    echo "DISABLE_POISON=${DISABLE_POISON}" >> $OUTPUT_FILE
    echo "BUILD_FULL_CMSSW=${BUILD_FULL_CMSSW}" >> $OUTPUT_FILE
    echo "RUN_ON_SLAVE=${RUN_ON_SLAVE}" >> $OUTPUT_FILE
    echo "RELEASE_FORMAT=${RELEASE_FORMAT}" >> $OUTPUT_FILE
    echo "DO_TESTS=${DO_TESTS}" >> $OUTPUT_FILE
    echo "DO_SHORT_MATRIX=${DO_SHORT_MATRIX}" >> $OUTPUT_FILE
    echo "DO_STATIC_CHECKS=${DO_STATIC_CHECKS}" >> $OUTPUT_FILE
    echo "DO_DUPLICATE_CHECKS=${DO_DUPLICATE_CHECKS}" >> $OUTPUT_FILE
    echo "MATRIX_EXTRAS=${MATRIX_EXTRAS}" >> $OUTPUT_FILE
    echo "ADDITIONAL_PULL_REQUESTS=${ADDITIONAL_PULL_REQUESTS}" >> $OUTPUT_FILE
    echo "WORKFLOWS_FOR_VALGRIND_TEST=${WORKFLOWS_FOR_VALGRIND_TEST}" >> $OUTPUT_FILE
    echo "AUTO_POST_MESSAGE=${AUTO_POST_MESSAGE}" >> $OUTPUT_FILE
    echo "RUN_CONFIG_VIEWER=${RUN_CONFIG_VIEWER}" >> $OUTPUT_FILE
    echo "USE_DAS_CACHE=${USE_DAS_CACHE}" >> $OUTPUT_FILE
    echo "BRANCH_NAME=${BRANCH_NAME}" >> $OUTPUT_FILE
    echo "APPLY_FIREWORKS_RULE=${APPLY_FIREWORKS_RULE}" >> $OUTPUT_FILE
    echo "RUN_IGPROF=${RUN_IGPROF}" >> $OUTPUT_FILE
    echo "CMSDIST_PR=${CMSDIST_PR}" >> $OUTPUT_FILE
    echo "FULL_TOOLCONF=true" >> $OUTPUT_FILE
    echo "COMPARISON_ARCH=${COMP_ARCH}" >> $OUTPUT_FILE
    echo "PUB_USER=${PUB_USER}" >> $OUTPUT_FILE
    echo "DOCKER_IMG=${DOCKER_IMG}" >> $OUTPUT_FILE
    echo "IGNORE_BOT_TESTS=${IGNORE_BOT_TESTS}" >> $OUTPUT_FILE
else
    exit_with_report_failure_main_pr "RELEASE_NOT_FOUND" --pr-job-id ${BUILD_NUMBER}
fi

